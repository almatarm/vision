/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.almatarm.vision;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;

/**
 *
 * @author almatarm
 */
public class Board extends javax.swing.JPanel {
    ArrayList<ShapeMover> movers = new ArrayList<>();
    boolean move = true;
    int moverIdx = 0;
    ShapeMover mover;
    
    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
        setBackground(Color.black);
    }

    public void add(ShapeMover mover) {
        movers.add(mover);
        if(this.mover == null) this.mover = mover;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    public void nextMover() {
        moverIdx = ++moverIdx % movers.size();
        mover = movers.get(moverIdx);
    }
    
    public void prevMover() {
        moverIdx = --moverIdx % movers.size();
        mover = movers.get(moverIdx);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void tick(int t) {
        if(move) {
//           movers.forEach(mover -> mover.tick(t));
            mover.tick(t);
        }
        repaint();
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);
        if(move) {
//            movers.forEach(mover -> mover.paint(g2d));
            mover.paint(g2d);
        }
    }
}
